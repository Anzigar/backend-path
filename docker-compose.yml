services:
  traefik:
    image: traefik:2.8
    container_name: traefik
    restart: always
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik.yml:/traefik.yml:ro"
      - "./acme.json:/acme.json"
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.traefik.service=traefik"
      - "traefik.http.routers.traefik.service=api@internal"

  foundation-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: foundation-api
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    restart: unless-stopped
    depends_on:
      - database
    networks:
      - proxy
    environment:
      - DB_HOST=database  # Override DB_HOST for Docker environment
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.foundation-api.rule=Host(`foundation-api.example.com`)"
      - "traefik.http.routers.foundation-api.entrypoints=websecure"
      - "traefik.http.routers.foundation-api.tls=true"
      - "traefik.http.routers.foundation-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.foundation-api.loadbalancer.server.port=8000"

  database:
    image: postgres:latest
    container_name: database
    restart: on-failure:5
    networks:
      - proxy
    env_file:
      - .env
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pathway-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      database:
        condition: service_healthy
    environment:
      - DOCKER_ENV=true
      - DB_TYPE=postgres
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_NAME=${POSTGRES_DB}
    volumes:
      - .:/app
    networks:
      - proxy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

volumes:
  postgres_data:
  media_volume:
  static_volume:

networks:
  proxy:
    driver: bridge

